'''::STRUCTURE::'''

SERVICE
'''handles all non-user-interactive features '''
	 - next_ep notifier
	 - prev_unwatched notifier
	 - displaying details when show is played
	 - smart playlist maintenance
	 - SHOW_DICT of TV_show classes, keyed by the show_id
	 - MONITOR
	 	 - pre-empting change in watched status
	 	 - next_ep and prev_uw checks
	 	 - detail display checks
	 	 - settings changed
	 	 - resuming partial episodes
	 	 - start watched movie at random time
	 	 - saves desired actions to an INTENT_LIST
	 - PLAYER
	 	 - keeps an eye on what is being played
	 	 - saves desired actions to an INTENT_LIST

DEFAULT
''' handles all UI and launching'''
	 - UI
	 	 - add in a button for the extra tools
	 - random player initialisation and interface
	 	 - playlist selection
	 	 - context menu


EXTERNAL SCRIPTS
''' external scripts called through the Addon Settings '''
	 - Shout
	 - Clone
	 - Episode Exporter
	 - Select playlist
	 - Icon selector *NEW*

CLASSES 
	 - all the classes
	 - import Classes as C

QUERIES
	 - all the queries
	 - import Queries as Q
	

'''::PROCESS::'''

 	 - DEFAULT sends SERVICE the list of show_ids (from smart PL or user selection)
 	 - SERVICE sends back a list of episodes

 	 - UI
 	 	- DEFAULT orders the list
 	 	- DEFAULT populates the UI
 	 	- to refresh, DEFAULT resends list of show_ids and repopulates the UI

 	 - random player
 	 	 - DEFAULT requests movielist from SERVICE is needed
 	 	 - if start with partial is selected, DEFAULT scans episodes to find latest partial
 	 	 - DEFAULT starts selecting shows at random
 	 	 	 - if additional show is required, DEFAULT sends single show_id with 'next' flag
 	 	 	 - SERVICE sends back single episode 

 	 - SERVICE monitors what is playing, and sends the update to DEFAULT to refresh the UI 
 	                                      OR 
 	 - DEFAULT monitors what is playing, and requests updates from SERVICE



'''::MAIN CLASS
## the _daemon checks each service routinely to see if there is an action required

__init__ creates 
	- MONITOR, 
	- PLAYER, 
	- TV_show classes, 
	- MovieList class, 
	- Settings class, 
	- smart_pl class,
	- pickler class
MONITOR, PLAYER, TELEGRAPH are on their own threads
__init__ must also create QUEUES for each one
'''

vars = {
		show_dict         : dict of tv show objects (with show_id as key),
		ep_dict           : dict of all epids used for fast show lookups (epid: show_id)
		socket_dict       : dict of the sockets used to talk to the other threads
		
	   }

func = {
		read_pickle       : reads the pickled tvshows dict (on start-up)
		pickler           : pickles the current tvshows objects,
		create_show_dict  : creates the show_dict,
		_daemon           : keeps the whole thing live,
		check_player      : checks if player has action pending in Queue 
		check_settings    : checks if the settings class has an action pending in Queue 
		check_monitor     : checks if the monitor has an action pending in Queue 
		check_DEFAULT     : checks if DEFAULT has a request pending
		dispatch          : dispatches actions and passes variables
		index_ep_ep_dict  : runs through all the shows, creates dict of each epid and the show_id assigned

	   }

acts = {
		TV_Show class 
			 - generate temp_ep
			 - swap over temp_ep
			 - re-identify on_deck
			 - 


	   }

'''::MovieList CLASS::'''

vars = {
		movielist   : list of list of movies, [watched, unwatched], tuple ()
	   }


'''::TV_Show CLASS::'''

vars = {
		show_id     : <show_id>,
		show_name   : <show_name>,
		eps_store   : stores episode classes   {
												on_deck_ep: <ondeck_ep>,
												addit_ep: [<additional_ep>],
												temp_ep: <temp_ep>
											   },
		od_pointer  : points to the current on_deck_ep in eps_store,
		ep_map      : [unwatched_OD, unwatched_skipped, watched],
		ep_order    : the order of the episodes, [epid, epid, ...],
		show_type   : norm|rando|all,
		stats       : {watched_eps: x, unwatched_eps: x, skipped_eps: x, last_watched: x, ...},

	   }


func = {
		next, __iter__ : cycle ondeck ep using ep_order,
		__sub__        : remove episode from eps_store,
		__add__        : add episode to eps_store,
		randomise      : re-randomises the randos,
		create_ep      : creates a new episode class, passes the epid, show_id, 
		update_stats   : creates-updates the stats,
		find_ondeck    : finds the ondeck episode, assigns the od_pointer,
		get_type       : gets the showtype from the settings, on a change then do action
		create_order   : generates the ep_order based on show_type,
		create_ep_map  : creates the episode map (retrieves all episodes for the show and assigns them to a grouping),
		store_temp_ep  : creates the temporary next episode in advance (identifed in the ep_order), ready to swap it over to be the next_ep very quickly,
		swapin_temp_ep : swaps the temp_ep over to the on_deck slot,

	   }


'''::Episode CLASS::'''

vars = {
		show_id       : <show_id>,
		ep_id         : <ep_id>,
		ep_name       : <ep_name>,
		ep_lastplayed : <last_played>
		ep_details    : everything else like the link, art, etc,

	   }


'''::Settings CLASS::'''

vars = {
		all_settings_dict  : {dict_of_settings: x}
	   }

func = {
		update_settings    : grabs all the settings for the addon, reconstructs all_settings_dict
		set_showtype       : updates each show with its show_type, calls the shows get_type function to implement the changes
	   }


'''::Smart_playlist Maintainer CLASS::'''

vars = {
		smartpl_dict         : {show_id: epid, ...}
		playlist_location    : the location the playlist should be stored
	   }

func = {
		create_playlist  : creates-updates the playlist
		update_dict      : updates the smartpl_dict
	   }	   


'''::MONITOR CLASS::'''
func = {
		onSettingsChanged   :  SETTINGS_CLASS.update_settings(),
		onDatabaseUpdated   :  if 'video' then 							'ACTION': Library update (full rescan),
		onNotification      :  if is episode and playcount < 2 then 	'ACTION': check this episode, (show_id, epid)


'''::PLAYER CLASS::'''
vars = {
		current_epid        : the episode id of the current show playing
func = {	
		onPlayBackStarted   : send the showid or epid to MAIN to set-up a temp record, post the details, or check for previous episode
		onPlayBackStopped   : call onPlayBackEnded
		onPlayBackEnded     : send the current epid to MAIN to say that show has ended 

'''::TELEGRAPH CLASS::'''
vars = {
		incoming_queue      : the queue for incoming messages, this is the one that MAIN checks 
		outgoing_queue      : the queue for outgoing messages, this is the one the DEFAULT will be checking


func = {
		talk_socket       : creates the socket connection to talk to DEFAULT, 
		hear_socket       : creates the socket connection to hear from DEFAULT,

}
